name: 📝 Author Registration Automation

on:
  issues:
    types: [opened]

jobs:
  process-author-registration:
    # author-registration 라벨이 있는 이슈만 처리
    if: contains(github.event.issue.labels.*.name, 'author-registration')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: 📋 Extract Issue Information
        id: extract
        run: |
          # 이슈 생성자 정보
          echo "issue_author=${{ github.event.issue.user.login }}" >> $GITHUB_OUTPUT
          echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          echo "issue_title=${{ github.event.issue.title }}" >> $GITHUB_OUTPUT
          
          # 이슈 본문에서 데이터 추출을 위한 준비
          echo "Extracting data from issue body..."

      - name: 🔍 Parse Issue Body
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = context.payload.issue.body;
            
            // 각 필드를 정규식으로 추출
            function extractField(body, fieldName) {
              const regex = new RegExp(`### ${fieldName}\\s*\\n\\s*([^\\n]+)`, 'i');
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            }
            
            // 다중 줄 필드 추출 (description용)
            function extractMultilineField(body, fieldName) {
              const regex = new RegExp(`### ${fieldName}\\s*\\n([\\s\\S]*?)(?=\\n### |$)`, 'i');
              const match = body.match(regex);
              if (!match) return '';
              
              let content = match[1].trim();
              
              // 마크다운 코드 블록 제거 (```text ... ``` 또는 ``` ... ```)
              content = content.replace(/^```[\w]*\s*\n?/, '').replace(/\n?```\s*$/, '');
              
              // 불필요한 공백과 줄바꿈 정리
              content = content.trim();
              
              // 빈 문자열이면 기본값 반환
              return content || '';
            }
            
            // 드롭다운 선택값 추출 (특별 처리)
            function extractDropdown(body, fieldName) {
              const regex = new RegExp(`### ${fieldName}\\s*\\n\\s*([^\\n]+)`, 'i');
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            }
            
            const data = {
              author_key: extractField(issueBody, '작성자 ID \\(영문\\)'),
              name: extractField(issueBody, '실명'),
              display_name: extractField(issueBody, '표시 이름'),
              email: extractField(issueBody, '이메일 주소'),
              web: extractField(issueBody, '개인 웹사이트 또는 GitHub'),
              description: extractMultilineField(issueBody, '자기소개'),
              avatar_option: extractDropdown(issueBody, '프로필 이미지 옵션')
            };
            
            console.log('Extracted data:', data);
            
            // 디버깅: description 추출 과정 로그
            console.log('Debug - Raw description match:', issueBody.match(/### 자기소개\s*\n([\s\S]*?)(?=\n### |$)/i));
            console.log('Debug - Description processing steps:');
            const rawDesc = issueBody.match(/### 자기소개\s*\n([\s\S]*?)(?=\n### |$)/i);
            if (rawDesc) {
              console.log('  1. Raw match:', JSON.stringify(rawDesc[1]));
              let step = rawDesc[1].trim();
              console.log('  2. After trim:', JSON.stringify(step));
              step = step.replace(/^```[\w]*\s*\n?/, '').replace(/\n?```\s*$/, '');
              console.log('  3. After code block removal:', JSON.stringify(step));
              console.log('  4. Final result:', JSON.stringify(step.trim()));
            }
            
            // GitHub Actions 환경변수로 설정
            for (const [key, value] of Object.entries(data)) {
              core.setOutput(key, value);
            }
            
            return data;

      - name: ✅ Validate Required Fields
        run: |
          # 필수 필드 검증
          if [ -z "${{ steps.parse.outputs.author_key }}" ]; then
            echo "❌ Error: 작성자 ID가 필요합니다."
            exit 1
          fi
          
          if [ -z "${{ steps.parse.outputs.name }}" ]; then
            echo "❌ Error: 실명이 필요합니다."
            exit 1
          fi
          
          if [ -z "${{ steps.parse.outputs.display_name }}" ]; then
            echo "❌ Error: 표시 이름이 필요합니다."
            exit 1
          fi
          
          if [ -z "${{ steps.parse.outputs.email }}" ]; then
            echo "❌ Error: 이메일 주소가 필요합니다."
            exit 1
          fi
          
          echo "✅ 모든 필수 필드가 입력되었습니다."

      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🖼️ Process Avatar Image
        id: avatar
        run: |
          author_key="${{ steps.parse.outputs.author_key }}"
          avatar_option="${{ steps.parse.outputs.avatar_option }}"
          issue_author="${{ steps.extract.outputs.issue_author }}"
          
          echo "Processing avatar for: $author_key"
          echo "Avatar option: $avatar_option"
          echo "Issue author: $issue_author"
          
          if [[ "$avatar_option" == *"본인 GitHub 프로필 이미지 사용"* ]]; then
            # 자동으로 이슈 생성자의 GitHub 프로필 이미지 사용
            github_username="$issue_author"
            echo "🤖 자동으로 이슈 생성자 프로필 이미지 사용: $github_username"
            
            # GitHub 프로필 이미지 다운로드
            echo "📥 Downloading GitHub profile image..."
            mkdir -p assets/images/author
            
            if curl -L "https://github.com/$github_username.png" -o "assets/images/author/$author_key.png"; then
              echo "✅ GitHub 프로필 이미지 다운로드 완료"
              echo "avatar_path=assets/images/author/$author_key.png" >> $GITHUB_OUTPUT
            else
              echo "❌ GitHub 프로필 이미지 다운로드 실패, 기본 이미지 사용"
              echo "avatar_path=assets/images/logo.png" >> $GITHUB_OUTPUT
            fi
            
          elif [[ "$avatar_option" == *"직접 업로드"* ]]; then
            echo "📎 직접 업로드 옵션 선택됨"
            echo "🔄 이슈 첨부파일에서 이미지를 찾는 중..."
            
            # 이슈 본문에서 첨부 이미지 URL 추출
            issue_body='${{ github.event.issue.body }}'
            
            echo "🔍 Debug: 이슈 본문 내용 확인 중..."
            echo "Issue body preview:"
            echo "$issue_body" | head -20
            
            # 다양한 GitHub 첨부파일 URL 패턴 시도
            echo "🔍 첨부파일 URL 패턴 검색 중..."
            
            # 패턴 1: user-attachments/assets (최신) - 확장자 없이
            image_url=$(echo "$issue_body" | grep -o 'https://github\.com/user-attachments/assets/[a-f0-9-]*' | head -1)
            
            # 패턴 2: user-attachments/assets (확장자 포함)
            if [ -z "$image_url" ]; then
              image_url=$(echo "$issue_body" | grep -o 'https://github\.com/user-attachments/assets/[a-f0-9-]*\.[a-zA-Z]*' | head -1)
            fi
            
            # 패턴 3: user-attachments/files (기존)
            if [ -z "$image_url" ]; then
              image_url=$(echo "$issue_body" | grep -o 'https://github\.com/user-attachments/files/[0-9]*/[^)]*\.[a-zA-Z]*' | head -1)
            fi
            
            # 패턴 4: 일반적인 이미지 링크
            if [ -z "$image_url" ]; then
              image_url=$(echo "$issue_body" | grep -o 'https://[^)]*\.\(png\|jpg\|jpeg\|gif\|webp\)' | head -1)
            fi
            
            echo "🔍 검색된 이미지 URL: $image_url"
            
            if [ ! -z "$image_url" ]; then
              echo "🎯 첨부 이미지 발견: $image_url"
              
              # 파일 확장자 추출 (확장자가 없으면 png로 기본값 설정)
              # URL에서 파일 확장자만 추출 (2-4글자 확장자만)
              file_ext=$(echo "$image_url" | grep -o '\.[a-zA-Z]\{2,4\}$' | sed 's/\.//')
              
              if [ -z "$file_ext" ]; then
                file_ext="png"
                echo "🔧 확장자 없음, 기본값 PNG 사용"
              else
                echo "🔧 추출된 확장자: $file_ext"
              fi
              
              echo "📁 사용할 확장자: $file_ext"
              
              # 이미지 다운로드
              mkdir -p assets/images/author
              
              if curl -L "$image_url" -o "assets/images/author/$author_key.$file_ext"; then
                echo "✅ 첨부 이미지 다운로드 완료"
                echo "avatar_path=assets/images/author/$author_key.$file_ext" >> $GITHUB_OUTPUT
              else
                echo "❌ 첨부 이미지 다운로드 실패, 기본 이미지 사용"
                echo "avatar_path=assets/images/logo.png" >> $GITHUB_OUTPUT
              fi
            else
              echo "⚠️ 첨부 이미지를 찾을 수 없습니다. 기본 이미지 사용"
              echo "avatar_path=assets/images/logo.png" >> $GITHUB_OUTPUT
            fi
            
          else
            echo "🖼️ 기본 이미지 사용"
            echo "avatar_path=assets/images/logo.png" >> $GITHUB_OUTPUT
          fi

      - name: ⚙️ Update _config.yml
        run: |
          author_key='${{ steps.parse.outputs.author_key }}'
          name='${{ steps.parse.outputs.name }}'
          display_name='${{ steps.parse.outputs.display_name }}'
          email='${{ steps.parse.outputs.email }}'
          web='${{ steps.parse.outputs.web }}'
          description='${{ steps.parse.outputs.description }}'
          avatar_path='${{ steps.avatar.outputs.avatar_path }}'
          
          echo "📝 Updating _config.yml with new author..."
          
          # authors 섹션의 마지막 빈 줄을 찾아서 새 작성자 추가
          # authors 섹션 다음 첫 번째 빈 줄을 찾기
          authors_section_start=$(grep -n "^authors:" _config.yml | cut -d: -f1)
          
          if [ -z "$authors_section_start" ]; then
            echo "❌ Error: authors 섹션을 찾을 수 없습니다."
            exit 1
          fi
          
          echo "🔍 authors 섹션 시작: line $authors_section_start"
          
          # authors 섹션 다음 첫 번째 빈 줄 찾기 (authors 다음 섹션 전까지)
          empty_line=$(sed -n "${authors_section_start},\$p" _config.yml | grep -n "^$" | head -1 | cut -d: -f1)
          
          if [ -z "$empty_line" ]; then
            echo "❌ Error: authors 섹션의 끝을 찾을 수 없습니다."
            exit 1
          fi
          
          # 실제 라인 번호 계산
          insert_line=$((authors_section_start + empty_line - 1))
          echo "🔍 삽입할 위치: line $insert_line"
          
          # 새 작성자 정보 생성 (올바른 들여쓰기로)
          # 직접 echo 방식으로 임시 파일 생성 (가장 안전한 방법)
          {
            echo "  $author_key:"
            echo "    name: $name"
            echo "    display_name: $display_name"
            echo "    avatar: '$avatar_path'"
            echo "    email: $email"
            echo "    web: $web"
            echo "    description: \"$description\""
          } > new_author.tmp
          
          # 임시 파일 생성해서 지정된 위치에 삽입
          {
            head -n $((insert_line - 1)) _config.yml
            cat new_author.tmp
            tail -n +$insert_line _config.yml
          } > _config_temp.yml
          
          # 원본 파일 교체
          mv _config_temp.yml _config.yml
          
          # 임시 파일 정리
          rm -f new_author.tmp
          
          echo "✅ _config.yml 업데이트 완료"
          echo "📍 새 작성자가 authors 섹션 내부에 추가되었습니다."

      - name: 🔧 Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "✍️: 새 작성자 등록 ${{ steps.parse.outputs.author_key }} (#${{ steps.extract.outputs.issue_number }})"
          title: "✨ 새 작성자 등록: ${{ steps.parse.outputs.display_name }}"
          body: |
            ## 🤗 새 블로그 작성자 등록
            
            **이슈**: #${{ steps.extract.outputs.issue_number }}
            **요청자**: @${{ steps.extract.outputs.issue_author }}
            
            ### 👤 작성자 정보
            - **ID**: `${{ steps.parse.outputs.author_key }}`
            - **이름**: ${{ steps.parse.outputs.name }}
            - **표시명**: ${{ steps.parse.outputs.display_name }}
            - **이메일**: ${{ steps.parse.outputs.email }}
            - **웹사이트**: ${{ steps.parse.outputs.web }}
            - **프로필 이미지**: `${{ steps.avatar.outputs.avatar_path }}`
            
            ### 📝 자기소개
            > ${{ steps.parse.outputs.description }}
            
            ---
            
            이 PR이 승인되면 @${{ steps.extract.outputs.issue_author }}님이 블로그 작성자로 등록됩니다.
            
            자동 생성된 PR입니다. 🤖
          branch: author-registration/${{ steps.parse.outputs.author_key }}
          delete-branch: true

      - name: 💬 Comment on Issue
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.create_pr.outputs.pull-request-number }}';
            const authorKey = '${{ steps.parse.outputs.author_key }}';
            const displayName = '${{ steps.parse.outputs.display_name }}';
            
            if (prNumber) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## 🎉 자동 처리 완료!
            
            안녕하세요 @${{ steps.extract.outputs.issue_author }}님! 
            
            작성자 등록 요청이 자동으로 처리되었습니다.
            
            ### 📋 생성된 내용
            - **Pull Request**: #${prNumber}
            - **작성자 ID**: \`${authorKey}\`
            - **표시명**: ${displayName}
            - **프로필 이미지**: ${{ steps.avatar.outputs.avatar_path }}
            
            ### 🔄 다음 단계
            1. 관리자가 PR을 검토합니다
            2. PR이 승인되면 작성자로 등록됩니다
            3. 등록 완료 후 블로그 글 작성을 시작할 수 있습니다!
            
            감사합니다! 🤗`
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## ❌ 처리 중 오류 발생
            
            죄송합니다. 작성자 등록 처리 중 오류가 발생했습니다.
            관리자에게 문의해주세요.`
              });
            }

      - name: 🎯 Workflow Summary
        run: |
          echo "## 🎉 Author Registration Workflow 완료!" >> $GITHUB_STEP_SUMMARY
          echo "- **작성자 ID**: ${{ steps.parse.outputs.author_key }}" >> $GITHUB_STEP_SUMMARY
          echo "- **표시명**: ${{ steps.parse.outputs.display_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PR 번호**: #${{ steps.create_pr.outputs.pull-request-number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **프로필 이미지**: ${{ steps.avatar.outputs.avatar_path }}" >> $GITHUB_STEP_SUMMARY
